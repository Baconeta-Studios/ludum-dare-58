// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using Coherence.Connection;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Entity initiatingPlayer;
            [FieldOffset(4)]
            public System.Int32 interactionType;
        }

        public static unsafe _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 8) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 8) " +
                    "for command with ID 101");
            }

            var orig = new _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f();
            var comp = (Interop*)data;
            orig.initiatingPlayer = comp->initiatingPlayer;
            orig.interactionType = comp->interactionType;
            return orig;
        }

        public Entity initiatingPlayer;
        public System.Int32 interactionType;
        
        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Target { get; set; }
        public MessageTarget Routing { get; set; }
        public uint SenderParticipant { get; set; }
        public ClientID SenderClientID { get; set; }
        public long Frame { get; set; }
        public uint GetComponentType() => 101;
        public bool UsesMeta { get; set; }

        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            err = mapper.MapToAbsoluteEntity(initiatingPlayer, false, out absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            this.initiatingPlayer = absoluteEntity;
            
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            err = mapper.MapToRelativeEntity(initiatingPlayer, false, out relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            this.initiatingPlayer = relativeEntity;
            
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return new HashSet<Entity> {
                this.initiatingPlayer,
            };
        }

        public void NullEntityRefs(Entity entity) {
            if (this.initiatingPlayer == entity) {
                this.initiatingPlayer = Entity.InvalidRelative;
            }
        }
        
        public _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f(
            Entity entity,
            Entity initiatingPlayer,
            System.Int32 interactionType
        )
        {
            Entity = entity;
            ChannelID = Coherence.ChannelID.Default;
            Target = default;
            Routing = MessageTarget.All;
            SenderParticipant = 0;
            SenderClientID = default;
            Frame = 0;
            UsesMeta = false;

            this.initiatingPlayer = initiatingPlayer; 
            this.interactionType = interactionType; 
        }
        
        public static void Serialize(_a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteEntity(commandData.initiatingPlayer);
            bitStream.WriteIntegerRange(commandData.interactionType, 2, 0);
        }
        
        public static _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var datainitiatingPlayer = bitStream.ReadEntity();
            var datainteractionType = bitStream.ReadIntegerRange(2, 0);
    
            return new _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6684c57b4da54db0a052a3fe8b036b3f()
            {
                Entity = entity,
                Routing = target,
                Target = target,
                initiatingPlayer = datainitiatingPlayer,
                interactionType = datainteractionType
            };   
        }
    }

}

// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Vector3 center;
            [FieldOffset(12)]
            public System.Single radius;
            [FieldOffset(16)]
            public System.Single height;
            [FieldOffset(20)]
            public System.Int32 direction;
            [FieldOffset(24)]
            public System.Byte enabled;
            [FieldOffset(25)]
            public System.Byte isTrigger;
            [FieldOffset(26)]
            public System.Single contactOffset;
            [FieldOffset(30)]
            public System.Byte hasModifiableContacts;
            [FieldOffset(31)]
            public System.Byte providesContacts;
            [FieldOffset(32)]
            public System.Int32 layerOverridePriority;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.centerMask;
            centerSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.radiusMask;
            radiusSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.heightMask;
            heightSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.directionMask;
            directionSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.enabledMask;
            enabledSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.isTriggerMask;
            isTriggerSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.contactOffsetMask;
            contactOffsetSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.hasModifiableContactsMask;
            hasModifiableContactsSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.providesContactsMask;
            providesContactsSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.layerOverridePriorityMask;
            layerOverridePrioritySimulationFrame = frame;
        }

        public static unsafe _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 36) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 36) " +
                    "for component with ID 20");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 20");
            }

            var orig = new _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471();

            var comp = (Interop*)data;

            orig.center = comp->center;
            orig.radius = comp->radius;
            orig.height = comp->height;
            orig.direction = comp->direction;
            orig.enabled = comp->enabled != 0;
            orig.isTrigger = comp->isTrigger != 0;
            orig.contactOffset = comp->contactOffset;
            orig.hasModifiableContacts = comp->hasModifiableContacts != 0;
            orig.providesContacts = comp->providesContacts != 0;
            orig.layerOverridePriority = comp->layerOverridePriority;

            return orig;
        }


        public static uint centerMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame centerSimulationFrame;
        public Vector3 center;
        public static uint radiusMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame radiusSimulationFrame;
        public System.Single radius;
        public static uint heightMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame heightSimulationFrame;
        public System.Single height;
        public static uint directionMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame directionSimulationFrame;
        public System.Int32 direction;
        public static uint enabledMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame enabledSimulationFrame;
        public System.Boolean enabled;
        public static uint isTriggerMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame isTriggerSimulationFrame;
        public System.Boolean isTrigger;
        public static uint contactOffsetMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame contactOffsetSimulationFrame;
        public System.Single contactOffset;
        public static uint hasModifiableContactsMask => 0b00000000000000000000000010000000;
        public AbsoluteSimulationFrame hasModifiableContactsSimulationFrame;
        public System.Boolean hasModifiableContacts;
        public static uint providesContactsMask => 0b00000000000000000000000100000000;
        public AbsoluteSimulationFrame providesContactsSimulationFrame;
        public System.Boolean providesContacts;
        public static uint layerOverridePriorityMask => 0b00000000000000000000001000000000;
        public AbsoluteSimulationFrame layerOverridePrioritySimulationFrame;
        public System.Int32 layerOverridePriority;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 20;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000001111111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 10;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _direction_Min = -2147483648;
        private static readonly System.Int32 _direction_Max = 2147483647;
        private static readonly System.Int32 _layerOverridePriority_Min = -2147483648;
        private static readonly System.Int32 _layerOverridePriority_Max = 2147483647;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.centerSimulationFrame = other.centerSimulationFrame;
                this.center = other.center;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.radiusSimulationFrame = other.radiusSimulationFrame;
                this.radius = other.radius;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.heightSimulationFrame = other.heightSimulationFrame;
                this.height = other.height;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.directionSimulationFrame = other.directionSimulationFrame;
                this.direction = other.direction;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.enabledSimulationFrame = other.enabledSimulationFrame;
                this.enabled = other.enabled;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.isTriggerSimulationFrame = other.isTriggerSimulationFrame;
                this.isTrigger = other.isTrigger;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.contactOffsetSimulationFrame = other.contactOffsetSimulationFrame;
                this.contactOffset = other.contactOffset;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.hasModifiableContactsSimulationFrame = other.hasModifiableContactsSimulationFrame;
                this.hasModifiableContacts = other.hasModifiableContacts;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.providesContactsSimulationFrame = other.providesContactsSimulationFrame;
                this.providesContacts = other.providesContacts;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.layerOverridePrioritySimulationFrame = other.layerOverridePrioritySimulationFrame;
                this.layerOverridePriority = other.layerOverridePriority;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 10);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = (data.center.ToCoreVector3());
                bitStream.WriteVector3(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.radius;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.height;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.direction, _direction_Min, _direction_Max, "_a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.direction", logger);
                data.direction = Coherence.Utils.Bounds.Clamp(data.direction, _direction_Min, _direction_Max);
                var fieldValue = data.direction;
                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.enabled;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.isTrigger;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.contactOffset;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.hasModifiableContacts;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.providesContacts;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.layerOverridePriority, _layerOverridePriority_Min, _layerOverridePriority_Max, "_a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.layerOverridePriority", logger);
                data.layerOverridePriority = Coherence.Utils.Bounds.Clamp(data.layerOverridePriority, _layerOverridePriority_Min, _layerOverridePriority_Max);
                var fieldValue = data.layerOverridePriority;
                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }
            mask >>= 1;

            return mask;
        }

        public static _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(10);
            }

            var val = new _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471();
            if (bitStream.ReadMask())
            {

                val.center = bitStream.ReadVector3(FloatMeta.NoCompression()).ToUnityVector3();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.centerMask;
            }
            if (bitStream.ReadMask())
            {

                val.radius = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.radiusMask;
            }
            if (bitStream.ReadMask())
            {

                val.height = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.heightMask;
            }
            if (bitStream.ReadMask())
            {

                val.direction = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.directionMask;
            }
            if (bitStream.ReadMask())
            {

                val.enabled = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.enabledMask;
            }
            if (bitStream.ReadMask())
            {

                val.isTrigger = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.isTriggerMask;
            }
            if (bitStream.ReadMask())
            {

                val.contactOffset = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.contactOffsetMask;
            }
            if (bitStream.ReadMask())
            {

                val.hasModifiableContacts = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.hasModifiableContactsMask;
            }
            if (bitStream.ReadMask())
            {

                val.providesContacts = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.providesContactsMask;
            }
            if (bitStream.ReadMask())
            {

                val.layerOverridePriority = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471.layerOverridePriorityMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_a1fa7cddf5d5ef94b8bacf8838c9a6fa_6886020198657681471(" +
                $" center: { this.center }" +
                $" radius: { this.radius }" +
                $" height: { this.height }" +
                $" direction: { this.direction }" +
                $" enabled: { this.enabled }" +
                $" isTrigger: { this.isTrigger }" +
                $" contactOffset: { this.contactOffset }" +
                $" hasModifiableContacts: { this.hasModifiableContacts }" +
                $" providesContacts: { this.providesContacts }" +
                $" layerOverridePriority: { this.layerOverridePriority }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(10, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(10, '0') })";
        }
    }

}

// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Vector3 bodyPosition;
            [FieldOffset(12)]
            public Quaternion bodyRotation;
            [FieldOffset(28)]
            public System.Byte fireEvents;
            [FieldOffset(29)]
            public Vector3 rootPosition;
            [FieldOffset(41)]
            public Quaternion rootRotation;
            [FieldOffset(57)]
            public System.Byte animatePhysics;
            [FieldOffset(58)]
            public System.Int32 updateMode;
            [FieldOffset(62)]
            public System.Byte applyRootMotion;
            [FieldOffset(63)]
            public System.Byte stabilizeFeet;
            [FieldOffset(64)]
            public System.Single feetPivotActive;
            [FieldOffset(68)]
            public System.Single speed;
            [FieldOffset(72)]
            public System.Int32 cullingMode;
            [FieldOffset(76)]
            public System.Single playbackTime;
            [FieldOffset(80)]
            public System.Single recorderStartTime;
            [FieldOffset(84)]
            public System.Single recorderStopTime;
            [FieldOffset(88)]
            public System.Byte layersAffectMassCenter;
            [FieldOffset(89)]
            public System.Byte logWarnings;
            [FieldOffset(90)]
            public System.Byte keepAnimatorStateOnDisable;
            [FieldOffset(91)]
            public System.Byte writeDefaultValuesOnDisable;
            [FieldOffset(92)]
            public System.Byte enabled;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.bodyPositionMask;
            bodyPositionSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.bodyRotationMask;
            bodyRotationSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.fireEventsMask;
            fireEventsSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.rootPositionMask;
            rootPositionSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.rootRotationMask;
            rootRotationSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.animatePhysicsMask;
            animatePhysicsSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.updateModeMask;
            updateModeSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.applyRootMotionMask;
            applyRootMotionSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.stabilizeFeetMask;
            stabilizeFeetSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.feetPivotActiveMask;
            feetPivotActiveSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.speedMask;
            speedSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.cullingModeMask;
            cullingModeSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.playbackTimeMask;
            playbackTimeSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.recorderStartTimeMask;
            recorderStartTimeSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.recorderStopTimeMask;
            recorderStopTimeSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.layersAffectMassCenterMask;
            layersAffectMassCenterSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.logWarningsMask;
            logWarningsSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.keepAnimatorStateOnDisableMask;
            keepAnimatorStateOnDisableSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.writeDefaultValuesOnDisableMask;
            writeDefaultValuesOnDisableSimulationFrame = frame;
            FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.enabledMask;
            enabledSimulationFrame = frame;
        }

        public static unsafe _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 93) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 93) " +
                    "for component with ID 28");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 28");
            }

            var orig = new _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391();

            var comp = (Interop*)data;

            orig.bodyPosition = comp->bodyPosition;
            orig.bodyRotation = comp->bodyRotation;
            orig.fireEvents = comp->fireEvents != 0;
            orig.rootPosition = comp->rootPosition;
            orig.rootRotation = comp->rootRotation;
            orig.animatePhysics = comp->animatePhysics != 0;
            orig.updateMode = comp->updateMode;
            orig.applyRootMotion = comp->applyRootMotion != 0;
            orig.stabilizeFeet = comp->stabilizeFeet != 0;
            orig.feetPivotActive = comp->feetPivotActive;
            orig.speed = comp->speed;
            orig.cullingMode = comp->cullingMode;
            orig.playbackTime = comp->playbackTime;
            orig.recorderStartTime = comp->recorderStartTime;
            orig.recorderStopTime = comp->recorderStopTime;
            orig.layersAffectMassCenter = comp->layersAffectMassCenter != 0;
            orig.logWarnings = comp->logWarnings != 0;
            orig.keepAnimatorStateOnDisable = comp->keepAnimatorStateOnDisable != 0;
            orig.writeDefaultValuesOnDisable = comp->writeDefaultValuesOnDisable != 0;
            orig.enabled = comp->enabled != 0;

            return orig;
        }


        public static uint bodyPositionMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame bodyPositionSimulationFrame;
        public Vector3 bodyPosition;
        public static uint bodyRotationMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame bodyRotationSimulationFrame;
        public Quaternion bodyRotation;
        public static uint fireEventsMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame fireEventsSimulationFrame;
        public System.Boolean fireEvents;
        public static uint rootPositionMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame rootPositionSimulationFrame;
        public Vector3 rootPosition;
        public static uint rootRotationMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame rootRotationSimulationFrame;
        public Quaternion rootRotation;
        public static uint animatePhysicsMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame animatePhysicsSimulationFrame;
        public System.Boolean animatePhysics;
        public static uint updateModeMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame updateModeSimulationFrame;
        public System.Int32 updateMode;
        public static uint applyRootMotionMask => 0b00000000000000000000000010000000;
        public AbsoluteSimulationFrame applyRootMotionSimulationFrame;
        public System.Boolean applyRootMotion;
        public static uint stabilizeFeetMask => 0b00000000000000000000000100000000;
        public AbsoluteSimulationFrame stabilizeFeetSimulationFrame;
        public System.Boolean stabilizeFeet;
        public static uint feetPivotActiveMask => 0b00000000000000000000001000000000;
        public AbsoluteSimulationFrame feetPivotActiveSimulationFrame;
        public System.Single feetPivotActive;
        public static uint speedMask => 0b00000000000000000000010000000000;
        public AbsoluteSimulationFrame speedSimulationFrame;
        public System.Single speed;
        public static uint cullingModeMask => 0b00000000000000000000100000000000;
        public AbsoluteSimulationFrame cullingModeSimulationFrame;
        public System.Int32 cullingMode;
        public static uint playbackTimeMask => 0b00000000000000000001000000000000;
        public AbsoluteSimulationFrame playbackTimeSimulationFrame;
        public System.Single playbackTime;
        public static uint recorderStartTimeMask => 0b00000000000000000010000000000000;
        public AbsoluteSimulationFrame recorderStartTimeSimulationFrame;
        public System.Single recorderStartTime;
        public static uint recorderStopTimeMask => 0b00000000000000000100000000000000;
        public AbsoluteSimulationFrame recorderStopTimeSimulationFrame;
        public System.Single recorderStopTime;
        public static uint layersAffectMassCenterMask => 0b00000000000000001000000000000000;
        public AbsoluteSimulationFrame layersAffectMassCenterSimulationFrame;
        public System.Boolean layersAffectMassCenter;
        public static uint logWarningsMask => 0b00000000000000010000000000000000;
        public AbsoluteSimulationFrame logWarningsSimulationFrame;
        public System.Boolean logWarnings;
        public static uint keepAnimatorStateOnDisableMask => 0b00000000000000100000000000000000;
        public AbsoluteSimulationFrame keepAnimatorStateOnDisableSimulationFrame;
        public System.Boolean keepAnimatorStateOnDisable;
        public static uint writeDefaultValuesOnDisableMask => 0b00000000000001000000000000000000;
        public AbsoluteSimulationFrame writeDefaultValuesOnDisableSimulationFrame;
        public System.Boolean writeDefaultValuesOnDisable;
        public static uint enabledMask => 0b00000000000010000000000000000000;
        public AbsoluteSimulationFrame enabledSimulationFrame;
        public System.Boolean enabled;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 28;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000011111111111111111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 20;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly System.Int32 _updateMode_Min = 0;
        private static readonly System.Int32 _updateMode_Max = 2;
        private static readonly System.Int32 _cullingMode_Min = 0;
        private static readonly System.Int32 _cullingMode_Max = 2;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.bodyPositionSimulationFrame = other.bodyPositionSimulationFrame;
                this.bodyPosition = other.bodyPosition;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.bodyRotationSimulationFrame = other.bodyRotationSimulationFrame;
                this.bodyRotation = other.bodyRotation;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.fireEventsSimulationFrame = other.fireEventsSimulationFrame;
                this.fireEvents = other.fireEvents;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.rootPositionSimulationFrame = other.rootPositionSimulationFrame;
                this.rootPosition = other.rootPosition;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.rootRotationSimulationFrame = other.rootRotationSimulationFrame;
                this.rootRotation = other.rootRotation;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.animatePhysicsSimulationFrame = other.animatePhysicsSimulationFrame;
                this.animatePhysics = other.animatePhysics;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.updateModeSimulationFrame = other.updateModeSimulationFrame;
                this.updateMode = other.updateMode;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.applyRootMotionSimulationFrame = other.applyRootMotionSimulationFrame;
                this.applyRootMotion = other.applyRootMotion;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.stabilizeFeetSimulationFrame = other.stabilizeFeetSimulationFrame;
                this.stabilizeFeet = other.stabilizeFeet;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.feetPivotActiveSimulationFrame = other.feetPivotActiveSimulationFrame;
                this.feetPivotActive = other.feetPivotActive;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.speedSimulationFrame = other.speedSimulationFrame;
                this.speed = other.speed;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.cullingModeSimulationFrame = other.cullingModeSimulationFrame;
                this.cullingMode = other.cullingMode;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.playbackTimeSimulationFrame = other.playbackTimeSimulationFrame;
                this.playbackTime = other.playbackTime;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.recorderStartTimeSimulationFrame = other.recorderStartTimeSimulationFrame;
                this.recorderStartTime = other.recorderStartTime;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.recorderStopTimeSimulationFrame = other.recorderStopTimeSimulationFrame;
                this.recorderStopTime = other.recorderStopTime;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.layersAffectMassCenterSimulationFrame = other.layersAffectMassCenterSimulationFrame;
                this.layersAffectMassCenter = other.layersAffectMassCenter;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.logWarningsSimulationFrame = other.logWarningsSimulationFrame;
                this.logWarnings = other.logWarnings;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.keepAnimatorStateOnDisableSimulationFrame = other.keepAnimatorStateOnDisableSimulationFrame;
                this.keepAnimatorStateOnDisable = other.keepAnimatorStateOnDisable;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.writeDefaultValuesOnDisableSimulationFrame = other.writeDefaultValuesOnDisableSimulationFrame;
                this.writeDefaultValuesOnDisable = other.writeDefaultValuesOnDisable;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.enabledSimulationFrame = other.enabledSimulationFrame;
                this.enabled = other.enabled;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 20);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = (data.bodyPosition.ToCoreVector3());
                bitStream.WriteVector3(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = (data.bodyRotation.ToCoreQuaternion());
                bitStream.WriteQuaternion(fieldValue, 32);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.fireEvents;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = (data.rootPosition.ToCoreVector3());
                bitStream.WriteVector3(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = (data.rootRotation.ToCoreQuaternion());
                bitStream.WriteQuaternion(fieldValue, 32);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.animatePhysics;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.updateMode, _updateMode_Min, _updateMode_Max, "_a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.updateMode", logger);
                data.updateMode = Coherence.Utils.Bounds.Clamp(data.updateMode, _updateMode_Min, _updateMode_Max);
                var fieldValue = data.updateMode;
                bitStream.WriteIntegerRange(fieldValue, 2, 0);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.applyRootMotion;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.stabilizeFeet;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.feetPivotActive;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.speed;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.cullingMode, _cullingMode_Min, _cullingMode_Max, "_a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.cullingMode", logger);
                data.cullingMode = Coherence.Utils.Bounds.Clamp(data.cullingMode, _cullingMode_Min, _cullingMode_Max);
                var fieldValue = data.cullingMode;
                bitStream.WriteIntegerRange(fieldValue, 2, 0);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.playbackTime;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.recorderStartTime;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.recorderStopTime;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.layersAffectMassCenter;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.logWarnings;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.keepAnimatorStateOnDisable;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.writeDefaultValuesOnDisable;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.enabled;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;

            return mask;
        }

        public static _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(20);
            }

            var val = new _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391();
            if (bitStream.ReadMask())
            {

                val.bodyPosition = bitStream.ReadVector3(FloatMeta.NoCompression()).ToUnityVector3();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.bodyPositionMask;
            }
            if (bitStream.ReadMask())
            {

                val.bodyRotation = bitStream.ReadQuaternion(32).ToUnityQuaternion();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.bodyRotationMask;
            }
            if (bitStream.ReadMask())
            {

                val.fireEvents = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.fireEventsMask;
            }
            if (bitStream.ReadMask())
            {

                val.rootPosition = bitStream.ReadVector3(FloatMeta.NoCompression()).ToUnityVector3();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.rootPositionMask;
            }
            if (bitStream.ReadMask())
            {

                val.rootRotation = bitStream.ReadQuaternion(32).ToUnityQuaternion();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.rootRotationMask;
            }
            if (bitStream.ReadMask())
            {

                val.animatePhysics = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.animatePhysicsMask;
            }
            if (bitStream.ReadMask())
            {

                val.updateMode = bitStream.ReadIntegerRange(2, 0);
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.updateModeMask;
            }
            if (bitStream.ReadMask())
            {

                val.applyRootMotion = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.applyRootMotionMask;
            }
            if (bitStream.ReadMask())
            {

                val.stabilizeFeet = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.stabilizeFeetMask;
            }
            if (bitStream.ReadMask())
            {

                val.feetPivotActive = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.feetPivotActiveMask;
            }
            if (bitStream.ReadMask())
            {

                val.speed = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.speedMask;
            }
            if (bitStream.ReadMask())
            {

                val.cullingMode = bitStream.ReadIntegerRange(2, 0);
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.cullingModeMask;
            }
            if (bitStream.ReadMask())
            {

                val.playbackTime = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.playbackTimeMask;
            }
            if (bitStream.ReadMask())
            {

                val.recorderStartTime = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.recorderStartTimeMask;
            }
            if (bitStream.ReadMask())
            {

                val.recorderStopTime = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.recorderStopTimeMask;
            }
            if (bitStream.ReadMask())
            {

                val.layersAffectMassCenter = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.layersAffectMassCenterMask;
            }
            if (bitStream.ReadMask())
            {

                val.logWarnings = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.logWarningsMask;
            }
            if (bitStream.ReadMask())
            {

                val.keepAnimatorStateOnDisable = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.keepAnimatorStateOnDisableMask;
            }
            if (bitStream.ReadMask())
            {

                val.writeDefaultValuesOnDisable = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.writeDefaultValuesOnDisableMask;
            }
            if (bitStream.ReadMask())
            {

                val.enabled = bitStream.ReadBool();
                val.FieldsMask |= _a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391.enabledMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_a1fa7cddf5d5ef94b8bacf8838c9a6fa_8174208910537896391(" +
                $" bodyPosition: { this.bodyPosition }" +
                $" bodyRotation: { this.bodyRotation }" +
                $" fireEvents: { this.fireEvents }" +
                $" rootPosition: { this.rootPosition }" +
                $" rootRotation: { this.rootRotation }" +
                $" animatePhysics: { this.animatePhysics }" +
                $" updateMode: { this.updateMode }" +
                $" applyRootMotion: { this.applyRootMotion }" +
                $" stabilizeFeet: { this.stabilizeFeet }" +
                $" feetPivotActive: { this.feetPivotActive }" +
                $" speed: { this.speed }" +
                $" cullingMode: { this.cullingMode }" +
                $" playbackTime: { this.playbackTime }" +
                $" recorderStartTime: { this.recorderStartTime }" +
                $" recorderStopTime: { this.recorderStopTime }" +
                $" layersAffectMassCenter: { this.layersAffectMassCenter }" +
                $" logWarnings: { this.logWarnings }" +
                $" keepAnimatorStateOnDisable: { this.keepAnimatorStateOnDisable }" +
                $" writeDefaultValuesOnDisable: { this.writeDefaultValuesOnDisable }" +
                $" enabled: { this.enabled }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(20, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(20, '0') })";
        }
    }

}
